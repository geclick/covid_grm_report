"""
Django settings for MERCES project.

Generated by 'django-admin startproject' using Django 2.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
DEBUG = True

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("MERCES_SECRET_KEY")

# Application definition

INSTALLED_APPS = [
    "django.contrib.contenttypes",
    # 'grappelli.dashboard',
    "grappelli",
    # 'jazzmin',
    "django.contrib.admin",
    "django.contrib.auth",
    # 'django.contrib.contenttypes',
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "nucleo",
    "rest_framework",
    "rest_framework.authtoken",
    "api_rest",
    "corsheaders",
    "rest_auth",
    "drf_yasg",
    "django_filters",
    "drf_extra_fields",
    "rest_framework_jwt",
    "import_export",
    "advanced_filters",
    "rangefilter",
    "protected_media.apps.ProtectedMediaConfig",
    "error",
    "django_unused_media",
    "django_cleanup.apps.CleanupConfig",
    "django_server_access_logs",
    "axes"
    # "defender",
    # "useraudit"
]

SESSION_EXPIRE_AT_BROWSER_CLOSE = True

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    # "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_server_access_logs.logging_middleware.AccessLogsMiddleware",
    "axes.middleware.AxesMiddleware"
    # "defender.middleware.FailedLoginMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    )
}

CORS_ORIGIN_ALLOW_ALL = False

CORS_ORIGIN_WHITELIST = (
    "http://localhost:3000",
    "http://localhost:8000",
    "http://10.25.45.240:8000",
    "http://127.0.0.1:8000",
)

ROOT_URLCONF = "MERCES.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.request",
            ],
        },
    },
]

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.environ.get("MERCES_DB_NAME"),
        "HOST": os.environ.get("MERCES_DB_HOST"),
        "PORT": os.environ.get("MERCES_DB_PORT"),
        "USER": os.environ.get("MERCES_DB_USER"),
        "PASSWORD": os.environ.get("MERCES_DB_PASSWORD"),
    }
}

WSGI_APPLICATION = "MERCES.wsgi.application"

LOGIN_URL = "/admin/login"
LOGOUT_URL = "/admin/logout"
LOGIN_REDIRECT_URL = "/admin"
LOGOUT_REDIRECT_URL = "/"
# django-useraudit
# LOGIN_FAILURE_LIMIT = 3
AXES_FAILURE_LIMIT = 5
AXES_ONLY_USER_FAILURES = True
AXES_LOCKOUT_TEMPLATE = "error/login_failed_limit.html"

AUTHENTICATION_BACKENDS = (
    "axes.backends.AxesBackend",
    "django.contrib.auth.backends.ModelBackend",
)

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",  # noqa: E501
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",  # noqa: E501
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "es"

TIME_ZONE = "America/Havana"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = (os.path.join(BASE_DIR, "assets"),)

# Localización de los ficheros estáticos
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# MEDIA
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#media-root
MEDIA_ROOT = os.path.join(BASE_DIR, "unprotected")
# https://docs.djangoproject.com/en/dev/ref/settings/#media-url
MEDIA_URL = "/unprotected/"

PROTECTED_MEDIA_ROOT = os.path.join(BASE_DIR, "media")
PROTECTED_MEDIA_URL = "/media/"
PROTECTED_MEDIA_SERVER = "nginx"  # Defaults to "django"
PROTECTED_MEDIA_LOCATION_PREFIX = "/internal"  # Prefix used in nginx config

# HIGIENE_DIR = os.path.join(MEDIA_ROOT, 'shared/higie')
LAB_DIR = "shared/lab/"
LAB_DIR_PROCESSED = "shared/lab/processed/"
HIGIENE_DIR = "shared/higie/"
HIGIENE_DIR_PROCESSED = "shared/higie/processed/"
EPIDEMIOLOGIA_DIR = "shared/bd/"
EPIDEMIOLOGIA_DIR_PROCESSED = "shared/bd/processed/"

# Upload size restriction in bytes. Default 1 mb = 1048576 bytes
FILE_UPLOAD_SIZE_LIMIT = 1048576

# Name TestResult instance that represent a positive result
POSITIVE_TEST = "POSITIVO"

# JAZZMIN_SETTINGS = {
#     # title of the window
#     "site_title": "GRM COVID-19 Data Portal",

#     # Title on the brand, and the login screen (19 chars max)
#     "site_header": "GRM COVID-19 Data Portal",
#     # Welcome text on the login screen
#     "welcome_sign": "Bienvenido a GRM COVID-19 Data Portal",

#     # Copyright on the footer
#     "copyright": "SOFTEE 2021"
# }


GRAPPELLI_ADMIN_TITLE = "GRM COVID-19 Data Portal"

FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755

FILE_UPLOAD_PERMISSIONS = 0o755

DATA_UPLOAD_MAX_MEMORY_SIZE = 26214400

FILE_UPLOAD_MAX_MEMORY_SIZE = 26214400

DATA_UPLOAD_MAX_NUMBER_FIELDS = 20240  # higher than the count of fields


LOCALE_PATHS = (os.path.join(BASE_DIR, "locale"),)

IMPORT_EXPORT_IMPORT_PERMISSION_CODE = "add"
IMPORT_EXPORT_EXPORT_PERMISSION_CODE = "view"


COUNTRY_PROVINCE = "GRANMA"

PENDING_TEST = "PENDIENTE"
